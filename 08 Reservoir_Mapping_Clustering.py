# -*- coding: utf-8 -*-
"""Reservoir Mapping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1canpuXE_nzIwwDH8EIu5i0bTe3J5x7PF

# **Assessing the Reduction of Bili-Bili Reservoir Water Body Area with K-Means Machine Learning Algorithm**<br>

Author: Iqbal F. Herlambang - 2025

Abstract: <br>
Remote sensing with satellite imagery, nowadays makes it easier for an analyst to see how the earth's appearance changes. Utilizing Landsat data, we can easily see changes in the area of the reservoir's water body. Bili-bili Dam, Sulawesi, Indonesia, has a high sedimentation issue because its upstream is Mount Bawakaraeng, which is quite active and often experiences slope slides during eruptions. It was found that using the K-Means Clustering algorithm (Unsupervised Machine Learning) there was a decrease in the area of the water body from 2016 of 11.77 km2 to 9.84 km2 in 2024 (- 16.39%). The K-Means algorithm automatically distinguishes between water and non-water areas, so changes can be monitored regularly and efficiently. With this data-driven information, dam management can be more evidence-based in formulating short- and long-term policies.<br>

*keywords* : Reservoir, K-Means, Landsat, Dam, Sedimentation

## Import Module
"""

import ee
import geemap
import xarray as xr
import matplotlib.pyplot as plt
import pandas as pd

#!pip install xee
import xee

"""# Data Preparation"""

ee.Authenticate()
ee.Initialize(project = 'satellite-rainfall-96961',opt_url ='https://earthengine-highvolume.googleapis.com')

# Import Basemap
map = geemap.Map(basemap = 'SATELLITE')
map

# Create Boundary
roi = map.draw_last_feature.geometry()
roi

# Import Dataset
landsat = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2").filterBounds(roi).filterDate('2014','2025')
landsat

# Function of NDWI
def ndwi(img):
  qa = img.select('QA_PIXEL')
  cloud = qa.bitwiseAnd(1 << 3).neq(0)
  cirrus = qa.bitwiseAnd(1 << 2).neq(0)
  shadow = qa.bitwiseAnd(1 << 4).neq(0)
  mask = cloud.Or(cirrus).Or(shadow)
  bands = img.select('SR.*').multiply(2.75e-05).add(-0.2)
  index = bands.normalizedDifference(['SR_B3','SR_B5']).rename('ndwi')
  return index.updateMask(mask.Not()).copyProperties(img,img.propertyNames())

landsat_ndwi = landsat.map(ndwi)
landsat_ndwi

ds = xr.open_dataset(landsat_ndwi,engine='ee',crs = 'EPSG:4326',scale=0.00008983, geometry = roi)
ds

ds_2016 = ds.sel(time=slice('2016-01-01','2016-12-31'))
ds_2020 = ds.sel(time=slice('2020-01-01','2020-12-31'))
ds_2024 = ds.sel(time=slice('2024-01-01','2024-12-31'))

ds_2016 = ds_2016.mean(dim = 'time')
ds_2020 = ds_2020.mean(dim = 'time')
ds_2024 = ds_2024.mean(dim = 'time')

fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 4))

axes = axes.flatten()

datasets = [ds_2016, ds_2020, ds_2024]
years = [2016,2020,2024]

for i, (ds, year) in enumerate(zip(datasets, years)):
    ds.ndwi.plot(x='lon', y='lat', ax=axes[i], robust=True)
    axes[i].set_title(str(year))

plt.tight_layout()
plt.show()

"""# K-Means Clustering"""

from sklearn.cluster import KMeans

model = KMeans(n_clusters=3,random_state=42)

df_2016 = ds_2016.to_dataframe()
df_2020 = ds_2020.to_dataframe()
df_2024 = ds_2024.to_dataframe()
df_2024 # Example

df_2016['clustering'] = model.fit_predict(df_2016[['ndwi']])
df_2020['clustering'] = model.fit_predict(df_2020[['ndwi']])
df_2024['clustering'] = model.fit_predict(df_2024[['ndwi']])
df_2024 # Example

xarr_2016 = df_2016.to_xarray().sortby('lon').sortby('lat')
xarr_2020 = df_2020.to_xarray().sortby('lon').sortby('lat')
xarr_2024 = df_2024.to_xarray().sortby('lon').sortby('lat')
xarr_2024

"""# Result"""

fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 4))
axes = axes.flatten()

datasets = [xarr_2016, xarr_2020, xarr_2024]
years = [2016, 2020, 2024]
titles = ['Clustering 2016', 'Clustering 2020', 'Clustering 2024']


for i, (ds, year, title) in enumerate(zip(datasets, years, titles)):
    ds.clustering.plot(x='lon', y='lat', ax=axes[i], cmap='bone')
    axes[i].set_title(title)

plt.tight_layout()
plt.show()

bili_pixels_2016 = (xarr_2016.clustering == 1).sum(dim = ['lon','lat'])
bili_pixels_2020 = (xarr_2020.clustering == 1).sum(dim = ['lon','lat'])
bili_pixels_2024 = (xarr_2024.clustering == 1).sum(dim = ['lon','lat'])

bili_area_2016 = (bili_pixels_2016 * 10 * 10)/ 1e6 # km
bili_area_2020 = (bili_pixels_2020 * 10 * 10)/ 1e6 # km
bili_area_2024 = (bili_pixels_2024 * 10 * 10)/ 1e6 # km

data = {'Year': [2016, 2020, 2024],
        'Main Water Body Area (km²)': [bili_area_2016.values.item(), bili_area_2020.values.item(), bili_area_2024.values.item()]}
result = pd.DataFrame(data).round(2)
result

"""<a href="https://www.linkedin.com/in/iqbalfauzanh/"><img src="https://img.shields.io/badge/-© 2025 Iqbal Fauzan Herlambang-417DAC?style=for-the-badge&logoColor=white"/></a>"""